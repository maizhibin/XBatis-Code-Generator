##DAO实现代码生成模版
##使用到的变量有：
##$!{gb.packageName}包名，如：net.letuu.order
##$!{gb.userName}机器登录用户名，如：microboss
##$!{gb.nowDate}当前日期，如：2013-05-02
##$!{tbb.className}类名，如：UserInfo
##$!{tbb.objectName}对象名，如：userInfo
##宏定义,用于单一对象的删除与查找的参数
#macro(primaryKey $tbb)
    #foreach($pkcol in $tbb.pkcol) $!{pkcol.propertyType} $!{pkcol.propertyName}  #if(!$foreach.last), #end #end
    #if($conf.isSplitTable()), String tableId#end
#end
##宏定义,用于多对象的删除与查找的参数
#macro( primaryKeys $tbb )
    #foreach($pkcol in $tbb.pkcol)#if($foreach.last)List<$!{pkcol.propertyType}> $!{pkcol.propertyName}List#else$!{pkcol.propertyType} $!{pkcol.propertyName},#end#end
    #if($conf.isSplitTable()), String tableId#end
#end
##主键值
#macro( primaryValue $tbb)
    #foreach($pkcol in $tbb.pkcol)$!{pkcol.propertyName}  #if(!$foreach.last), #end #end
    #if($conf.isSplitTable()), tableId #end
#end
##主键值
#macro( primaryValues $tbb )
    #foreach($pkcol in $tbb.pkcol)#if($foreach.last)$!{pkcol.propertyName}List#else $!{pkcol.propertyName},#end#end
    #if($conf.isSplitTable()), tableId #end
#end
#macro( tableType $isSplitTable )
    #if($isSplitTable), String tableId#end
#end
#macro( tableValue $isSplitTable )
    #if($isSplitTable)
        #if($isSplitTable), tableId#end
    #end
#end
#set($conf=$!{tbb.conf})
#set($PO = $!{gb.objSuffix})
#set($clear = "")
package $!{gb.packageName}.service.impl;

import java.util.List;
import java.util.Collections;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
#foreach($cb in $tbb.colList)
#if($!{cb.propertyType}=="Clob"&&!$clob)
import java.sql.Clob;
#set($clob=true)
#elseif($!{cb.propertyType}=="Blob"&&!$blob)
import java.sql.Blob;
#set($blob=true)
#elseif($!{cb.propertyType}=="Date"&&!$d)
import java.util.Date;
#set($d=true)
#elseif($!{cb.propertyType}=="BigDecimal"&&!$bigDecimal)
import java.math.BigDecimal;
#set($bigDecimal=true)
#end
#end

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import javax.annotation.Resource;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import $!{gb.packageName}.pojo.$!{tbb.className}${PO};
import $!{gb.packageName}.dao.$!{tbb.className}DAO;
#if($conf.isNeedPage())import $!{gb.packageName}.common.Result;
#end
#if($conf.isNeedPage())import $!{gb.packageName}.query.$!{tbb.className}Query;
#end
import $!{gb.packageName}.service.$!{tbb.className}Service;
/**
 * @author $!{gb.userName}
 * @since $!{gb.nowDate}
 */
@Service("$!{tbb.className}Service")
public class $!{tbb.className}ServiceImpl implements $!{tbb.className}Service{

    private static final Log log = LogFactory.getLog($!{tbb.className}ServiceImpl.class);

	@Resource
	$!{tbb.className}DAO $!{tbb.objectName}DAO;

    /**
     * 插入数据库
     * @return
     */
	public Integer add$!{tbb.className}${PO}($!{tbb.className}${PO} $!{tbb.objectName}){
		try{
			return $!{tbb.objectName}DAO.add$!{tbb.className}${PO}($!{tbb.objectName});
		}catch(SQLException e){
			log.error("dao add$!{tbb.className}${PO} error.:" + e.getMessage(), e);
		}
		return 0;
	}
#if($conf.isGetByKey())
    /**
     * 根据主键查找
     */
	public $!{tbb.className}${PO} get$!{tbb.className}${PO}ByKey(#primaryKey($tbb)){
		try{
			return $!{tbb.objectName}DAO.get$!{tbb.className}${PO}ByKey(#primaryValue($tbb));
		}catch(SQLException e){
			log.error("dao get$!{tbb.className}${PO}byKey error.:" + e.getMessage(), e);
		}
		return null;
	}
#end
#if($conf.isGetByKeys())
    public List<$!{tbb.className}${PO}> get$!{tbb.className}${PO}ByKeys(#primaryKeys($tbb)){
        try{
            return $!{tbb.objectName}DAO.get$!{tbb.className}${PO}ByKeys(#primaryValues($tbb));
        }catch(SQLException e){
            log.error("dao get$!{tbb.className}${PO}sByKeys erorr."+ e.getMessage(),e);
        }
        return null;
    }
#end
#if($conf.isDelByKey())
    /**
     * 根据主键删除
     * @return
     */
	public Integer deleteByKey(#primaryKey($tbb)){
		try{
			return $!{tbb.objectName}DAO.deleteByKey(#primaryValue($tbb));
		}catch(SQLException e){
		    log.error("dao deleteByKey error. :" + e.getMessage(), e);
		}
		return -1;
	}
#end
#if($conf.isDelByKeys())
    public Integer deleteByKeys(#primaryKeys($tbb)){
        try{
            return $!{tbb.objectName}DAO.deleteByKeys(#primaryValues($tbb));
        }catch(SQLException e){
            log.error("dao deleteByKeys error. $!{tbb.pkcol.propertyName}s:" + e.getMessage(), e);
        }
        return -1;
    }
#end
#if($conf.isUpdateKey())
    /**
     * 根据主键更新
     * @return
     */
	public Integer update$!{tbb.className}${PO}ByKey($!{tbb.className}${PO} $!{tbb.objectName}){
	    try{
		    return $!{tbb.objectName}DAO.update$!{tbb.className}${PO}ByKey($!{tbb.objectName});
		}catch(SQLException e){
		   log.error("dao update$!{tbb.className}${PO} error.$!{tbb.objectName}:"+ e.getMessage(), e);
	    }
		return -1;
	}
#end

#if($conf.isNeedPage())
	public Result<$!{tbb.className}${PO}> get$!{tbb.className}${PO}ListWithPage($!{tbb.className}Query $!{tbb.objectName}Query){
		Result<$!{tbb.className}${PO}> rs = $!{tbb.objectName}DAO.get$!{tbb.className}${PO}ListWithPage($!{tbb.objectName}Query);
		if(!rs.isSuccess()){
			log.error("get $!{tbb.className} error."+rs.getErrorMsg());
		}
		return rs;
	}	
#end
    
    public List<$!{tbb.className}${PO}> get$!{tbb.className}${PO}List($!{tbb.className}Query $!{tbb.objectName}Query){
		try{
		   return $!{tbb.objectName}DAO.get$!{tbb.className}${PO}List($!{tbb.objectName}Query);
		}catch(SQLException e){
		   log.error("get $!{tbb.className} list error." + e.getMessage() , e);
	    }
		return Collections.emptyList();
	}

#if($conf.selectMap.size()>0)
#foreach($sel in $conf.selectMap.keySet())
#if( $conf.selectMap.get($sel) && $conf.selectMap.get($sel).size()>0)${clear}
    public #if($sel.indexOf("List")>=0)List<$!{tbb.className}${PO}>#{else}$!{tbb.className}${PO}#end ${sel}(#foreach($w in $conf.selectMap.get($sel))#{if}($!{tbb.colMap.get($w)})#{if}($!{velocityCount}>1),#{end}$!{tbb.colMap.get($w).propertyType} $!{tbb.colMap.get($w).propertyName}#{end}#{end}){
        try{
            return (#if($sel.indexOf("List")>=0)List<$!{tbb.className}${PO}>#{else}$!{tbb.className}${PO}#end)$!{tbb.objectName}DAO.${sel}(#foreach($w in $conf.selectMap.get($sel))#{if}($!{tbb.colMap.get($w)})#{if}($!{velocityCount}>1),#{end}$!{tbb.colMap.get($w).propertyName}#{end}#{end});
        }catch(SQLException e){
            log.error("dao ${sel} error" + e.getMessage(),e);
        }
        return #if($sel.indexOf("List")>=0)Collections.emptyList()#{else}null#end;
    }
#end
#end
#end
}
